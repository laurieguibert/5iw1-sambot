'use strict';

var request = require('request'),
  Q = require('q'),
  url = require('url'),
  assert = require('assert'),
  utils = require('./utils'),
  noop = function() {
  };

var OAUTH_URL = 'https://www.eventbrite.com/oauth/authorize';
var AUTHORIZATION_URL = 'https://www.eventbrite.com/oauth/token';
var API_URL = 'https://www.eventbriteapi.com/v3/';

module.exports = Eventbrite;

/**
 *
 * Authorization flow:
 *
 * 1. set clientKey & clientSecret
 * 2. get OAuth url & redirect user
 * 3. extract code from response & exchange it to token
 * 4. talk with eventbrite
 *
 *
 * @constructor
 * @param {string} clientKey Identifies your app during the OAuth handshake. Not secret.
 * @param {string} clientSecret Identifies your app during a server-side handshake. Secret.
 */
function Eventbrite(clientKey, clientSecret) {
  if (!(this instanceof Eventbrite)) {
    return new Eventbrite(clientKey, clientSecret);
  }
  this.accessToken = null;
  this.clientKey = clientKey || null;
  this.clientSecret = clientSecret || null;
}

Q.denodeify(Eventbrite.get);

Eventbrite.prototype = {

  /**
   * Set access token
   * @param {string} accessToken
   * @returns {Eventbrite}
   */
  setAccessToken: function(accessToken) {
    this.accessToken = accessToken;
    return this;
  },

  /**
   * Return url which should be used to redirect user
   *
   * @returns {string}
   */
  getOAuthUrl: function() {
    assert(this.clientKey !== null, 'The value of clientKey is not set');

    var params = {
        response_type: 'code',
        client_id: this.clientKey
      },
      urlObj = url.parse(OAUTH_URL);

    urlObj.query = params;
    return url.format(urlObj);
  },

  /**
   * Make authorization - exchange code to access token
   *
   * @param {string} code
   */
  authorize: function(code, callback) {
    callback = callback || noop;

    assert(this.clientKey !== null, 'The value of clientKey is not set');
    assert(this.clientSecret !== null, 'The value of clientSecret is not set');
    assert(code, 'The value of code is not set');

    request.post({
        url: AUTHORIZATION_URL,
        headers: {
          'Content-type': 'application/x-www-form-urlencoded'
        },
        form: {
          code: code,
          client_secret: this.clientSecret,
          client_id: this.clientKey,
          grant_type: 'authorization_code'
        }
      },
      function(err, response, body) {
        if (err) {
          return callback(err);
        }
        else {
          body = utils.toJSON(body);
          this.setAccessToken(body.access_token);
          callback(null, { access_token: body.access_token });
        }
      }.bind(this));
  },

  /**
   *
   * @param path
   * @param params
   * @param callback
   */
  get: function(path, params, callback) {
    assert(this.accessToken, 'The value of access token is not set');

    if(callback === undefined) {
      callback = params;
      params = {};
    }

    callback = callback || noop;

    if(path[0] === '/') {
      path = path.substr(1);
    }

    var queryParams = {
      url: url.resolve(API_URL, path),
      qs: params,
      headers: {
        Authorization: 'Bearer ' + this.accessToken
      }
    };

    request.get(queryParams,
      function(err, response, body) {

        if (err) {
          return callback(response);
        }
        callback(null, utils.toJSON(body));
      });
  },

  post: function(path, params, callback) {
    assert(this.accessToken, 'The value of access token is not set');

    if(callback ===undefined) {
      callback = params;
      params = {};
    }

    callback = callback || noop;
    if(path[0] === '/') {
      path = path.substr(1);
    }
    request.post({
        url: url.resolve(API_URL, path),
        json: params,
        headers: {
          Authorization: 'Bearer ' + this.accessToken
        }
      },
      function(err, response, body) {
        if (err) {
          return callback(response);
        }
        callback(null, utils.toJSON(body));
      });
  }
};

Eventbrite.prototype.authorize = Q.denodeify(Eventbrite.prototype.authorize);
Eventbrite.prototype.get = Q.denodeify(Eventbrite.prototype.get);
Eventbrite.prototype.post = Q.denodeify(Eventbrite.prototype.post);